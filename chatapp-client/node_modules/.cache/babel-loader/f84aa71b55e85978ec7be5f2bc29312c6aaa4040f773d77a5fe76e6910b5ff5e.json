{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\ChatApplication\\\\chatapp-client\\\\src\\\\components\\\\ChatWindow.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { connection, startConnection } from \"../services/signalRConnection\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatWindow = ({\n  currentUser,\n  onLogout\n}) => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [message, setMessage] = useState(\"\");\n  const [allChats, setAllChats] = useState({});\n  const [notifications, setNotifications] = useState({});\n  const [isConnected, setIsConnected] = useState(false);\n  const [chatBackground, setChatBackground] = useState(\"#f0f0f0\"); // default background\n\n  const messagesEndRef = useRef(null);\n\n  // Scroll chat to bottom\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [allChats, selectedUser]);\n  useEffect(() => {\n    const init = async () => {\n      try {\n        if (connection.state === \"Disconnected\" || connection.state === 0) {\n          await startConnection();\n        }\n        connection.off(\"ReceiveMessage\");\n        connection.onreconnected(() => setIsConnected(true));\n        connection.onclose(() => setIsConnected(false));\n        if (connection.state === \"Connected\" || connection.state === 1) setIsConnected(true);\n        await connection.invoke(\"Login\", currentUser.id);\n        const res = await fetch(\"http://localhost:5090/api/users\");\n        const data = await res.json();\n        setUsers(data.filter(u => u.id !== currentUser.id));\n        const usersMap = Object.fromEntries(data.map(u => [u.id, u.username]));\n        connection.on(\"ReceiveMessage\", (senderId, receiverId, messageText) => {\n          const otherUserId = senderId === currentUser.id ? receiverId : senderId;\n          const msg = {\n            senderId,\n            message: (messageText === null || messageText === void 0 ? void 0 : messageText.toString()) || \"\",\n            senderUsername: usersMap[senderId] || \"Unknown\"\n          };\n          setAllChats(prev => ({\n            ...prev,\n            [otherUserId]: [...(prev[otherUserId] || []), msg]\n          }));\n          if (!selectedUser || selectedUser.id !== senderId) {\n            setNotifications(prev => ({\n              ...prev,\n              [senderId]: (prev[senderId] || 0) + 1\n            }));\n          }\n        });\n      } catch (err) {\n        console.error(\"SignalR connection failed:\", err);\n      }\n    };\n    init();\n    return () => {\n      connection.off(\"ReceiveMessage\");\n      connection.onclose(null);\n      connection.onreconnected(null);\n    };\n  }, [currentUser]);\n  const sendMessage = async () => {\n    if (!message.trim() || !selectedUser) return;\n    if (connection.state !== \"Connected\" && connection.state !== 1) return;\n    try {\n      await connection.invoke(\"SendMessage\", selectedUser.id, message);\n      const msg = {\n        senderId: currentUser.id,\n        message,\n        senderUsername: currentUser.username\n      };\n      setAllChats(prev => ({\n        ...prev,\n        [selectedUser.id]: [...(prev[selectedUser.id] || []), msg]\n      }));\n      setMessage(\"\");\n    } catch (err) {\n      console.error(\"SendMessage failed:\", err);\n    }\n  };\n  const handleUserClick = async user => {\n    setSelectedUser(user);\n    setNotifications(prev => ({\n      ...prev,\n      [user.id]: 0\n    }));\n    sessionStorage.setItem(\"lastSelectedUser\", JSON.stringify(user));\n    try {\n      const res = await fetch(`http://localhost:5090/api/users/messages/${currentUser.id}/${user.id}`);\n      const msgs = await res.json();\n      const formatted = msgs.map(m => ({\n        senderId: m.senderId,\n        message: m.text,\n        senderUsername: m.senderId === currentUser.id ? currentUser.username : user.username\n      }));\n      setAllChats(prev => ({\n        ...prev,\n        [user.id]: formatted\n      }));\n    } catch (err) {\n      console.error(\"Failed to fetch messages:\", err);\n    }\n  };\n  useEffect(() => {\n    const lastUser = sessionStorage.getItem(\"lastSelectedUser\");\n    if (lastUser) handleUserClick(JSON.parse(lastUser));\n  }, []);\n  const handleLogoutClick = () => {\n    sessionStorage.removeItem(\"currentUser\");\n    sessionStorage.removeItem(\"lastSelectedUser\");\n    onLogout();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-screen bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/4 border-r p-4 overflow-y-auto bg-white shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"font-bold text-lg\",\n          children: currentUser.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogoutClick,\n          className: \"text-sm bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\",\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleUserClick(user),\n        className: `flex justify-between items-center p-2 rounded cursor-pointer mb-1 ${(selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.id) === user.id ? \"bg-blue-100\" : \"hover:bg-gray-200\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-medium\",\n          children: user.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), notifications[user.id] > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bg-red-500 text-white rounded-full text-xs px-2 py-0.5\",\n          children: notifications[user.id]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this)]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex flex-col p-4\",\n      children: selectedUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"font-bold text-lg border-b pb-2\",\n            children: selectedUser.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"color\",\n            value: chatBackground,\n            onChange: e => setChatBackground(e.target.value),\n            className: \"w-10 h-8 rounded cursor-pointer\",\n            title: \"Change Chat Background\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-1 overflow-y-auto p-3 rounded-lg shadow-inner mb-2 flex flex-col space-y-2\",\n          style: {\n            backgroundColor: chatBackground\n          },\n          children: [(allChats[selectedUser.id] || []).map((c, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `max-w-[70%] p-2 rounded-lg shadow ${c.senderId === currentUser.id ? \"self-end bg-blue-500 text-white\" : \"self-start bg-white text-gray-800\"}`,\n            children: c.message\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"flex-1 border rounded-full p-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-400\",\n            placeholder: \"Message...\",\n            value: message,\n            onChange: e => setMessage(e.target.value),\n            onKeyDown: e => e.key === \"Enter\" && sendMessage()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: sendMessage,\n            disabled: !isConnected || !selectedUser,\n            className: `px-4 py-2 rounded-full text-white ${isConnected ? \"bg-blue-500 hover:bg-blue-600\" : \"bg-gray-400 cursor-not-allowed\"}`,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 flex items-center justify-center text-gray-400 text-lg\",\n        children: \"Select a user to start chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"Ku6Hx/3KS2z/VjZYJcCwVOtkr2M=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useEffect","useState","useRef","connection","startConnection","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatWindow","currentUser","onLogout","_s","users","setUsers","selectedUser","setSelectedUser","message","setMessage","allChats","setAllChats","notifications","setNotifications","isConnected","setIsConnected","chatBackground","setChatBackground","messagesEndRef","current","scrollIntoView","behavior","init","state","off","onreconnected","onclose","invoke","id","res","fetch","data","json","filter","u","usersMap","Object","fromEntries","map","username","on","senderId","receiverId","messageText","otherUserId","msg","toString","senderUsername","prev","err","console","error","sendMessage","trim","handleUserClick","user","sessionStorage","setItem","JSON","stringify","msgs","formatted","m","text","lastUser","getItem","parse","handleLogoutClick","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","title","style","backgroundColor","c","i","ref","placeholder","onKeyDown","key","disabled","_c","$RefreshReg$"],"sources":["D:/Project/ChatApplication/chatapp-client/src/components/ChatWindow.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { connection, startConnection } from \"../services/signalRConnection\";\r\n\r\nconst ChatWindow = ({ currentUser, onLogout }) => {\r\n  const [users, setUsers] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [allChats, setAllChats] = useState({});\r\n  const [notifications, setNotifications] = useState({});\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [chatBackground, setChatBackground] = useState(\"#f0f0f0\"); // default background\r\n\r\n  const messagesEndRef = useRef(null);\r\n\r\n  // Scroll chat to bottom\r\n  useEffect(() => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [allChats, selectedUser]);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        if (connection.state === \"Disconnected\" || connection.state === 0) {\r\n          await startConnection();\r\n        }\r\n\r\n        connection.off(\"ReceiveMessage\");\r\n        connection.onreconnected(() => setIsConnected(true));\r\n        connection.onclose(() => setIsConnected(false));\r\n\r\n        if (connection.state === \"Connected\" || connection.state === 1)\r\n          setIsConnected(true);\r\n\r\n        await connection.invoke(\"Login\", currentUser.id);\r\n\r\n        const res = await fetch(\"http://localhost:5090/api/users\");\r\n        const data = await res.json();\r\n        setUsers(data.filter((u) => u.id !== currentUser.id));\r\n\r\n        const usersMap = Object.fromEntries(data.map(u => [u.id, u.username]));\r\n\r\n        connection.on(\"ReceiveMessage\", (senderId, receiverId, messageText) => {\r\n          const otherUserId = senderId === currentUser.id ? receiverId : senderId;\r\n          const msg = {\r\n            senderId,\r\n            message: messageText?.toString() || \"\",\r\n            senderUsername: usersMap[senderId] || \"Unknown\",\r\n          };\r\n\r\n          setAllChats((prev) => ({\r\n            ...prev,\r\n            [otherUserId]: [...(prev[otherUserId] || []), msg],\r\n          }));\r\n\r\n          if (!selectedUser || selectedUser.id !== senderId) {\r\n            setNotifications((prev) => ({\r\n              ...prev,\r\n              [senderId]: (prev[senderId] || 0) + 1,\r\n            }));\r\n          }\r\n        });\r\n      } catch (err) {\r\n        console.error(\"SignalR connection failed:\", err);\r\n      }\r\n    };\r\n    init();\r\n    return () => {\r\n      connection.off(\"ReceiveMessage\");\r\n      connection.onclose(null);\r\n      connection.onreconnected(null);\r\n    };\r\n  }, [currentUser]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!message.trim() || !selectedUser) return;\r\n    if (connection.state !== \"Connected\" && connection.state !== 1) return;\r\n\r\n    try {\r\n      await connection.invoke(\"SendMessage\", selectedUser.id, message);\r\n\r\n      const msg = { senderId: currentUser.id, message, senderUsername: currentUser.username };\r\n      setAllChats((prev) => ({\r\n        ...prev,\r\n        [selectedUser.id]: [...(prev[selectedUser.id] || []), msg],\r\n      }));\r\n\r\n      setMessage(\"\");\r\n    } catch (err) {\r\n      console.error(\"SendMessage failed:\", err);\r\n    }\r\n  };\r\n\r\n  const handleUserClick = async (user) => {\r\n    setSelectedUser(user);\r\n    setNotifications((prev) => ({ ...prev, [user.id]: 0 }));\r\n    sessionStorage.setItem(\"lastSelectedUser\", JSON.stringify(user));\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:5090/api/users/messages/${currentUser.id}/${user.id}`);\r\n      const msgs = await res.json();\r\n      const formatted = msgs.map(m => ({\r\n        senderId: m.senderId,\r\n        message: m.text,\r\n        senderUsername: m.senderId === currentUser.id ? currentUser.username : user.username\r\n      }));\r\n      setAllChats((prev) => ({ ...prev, [user.id]: formatted }));\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch messages:\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const lastUser = sessionStorage.getItem(\"lastSelectedUser\");\r\n    if (lastUser) handleUserClick(JSON.parse(lastUser));\r\n  }, []);\r\n\r\n  const handleLogoutClick = () => {\r\n    sessionStorage.removeItem(\"currentUser\");\r\n    sessionStorage.removeItem(\"lastSelectedUser\");\r\n    onLogout();\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-screen bg-gray-100\">\r\n      {/* Sidebar */}\r\n      <div className=\"w-1/4 border-r p-4 overflow-y-auto bg-white shadow\">\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <h2 className=\"font-bold text-lg\">{currentUser.username}</h2>\r\n          <button\r\n            onClick={handleLogoutClick}\r\n            className=\"text-sm bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\"\r\n          >\r\n            Logout\r\n          </button>\r\n        </div>\r\n        {users.map((user) => (\r\n          <div\r\n            key={user.id}\r\n            onClick={() => handleUserClick(user)}\r\n            className={`flex justify-between items-center p-2 rounded cursor-pointer mb-1 ${\r\n              selectedUser?.id === user.id ? \"bg-blue-100\" : \"hover:bg-gray-200\"\r\n            }`}\r\n          >\r\n            <span className=\"font-medium\">{user.username}</span>\r\n            {notifications[user.id] > 0 && (\r\n              <span className=\"bg-red-500 text-white rounded-full text-xs px-2 py-0.5\">\r\n                {notifications[user.id]}\r\n              </span>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Chat Area */}\r\n      <div className=\"flex-1 flex flex-col p-4\">\r\n        {selectedUser ? (\r\n          <>\r\n            <div className=\"flex justify-between items-center mb-2\">\r\n              <h2 className=\"font-bold text-lg border-b pb-2\">{selectedUser.username}</h2>\r\n              {/* Chat background selector */}\r\n              <input\r\n                type=\"color\"\r\n                value={chatBackground}\r\n                onChange={(e) => setChatBackground(e.target.value)}\r\n                className=\"w-10 h-8 rounded cursor-pointer\"\r\n                title=\"Change Chat Background\"\r\n              />\r\n            </div>\r\n\r\n            {/* Messages */}\r\n            <div\r\n              className=\"flex-1 overflow-y-auto p-3 rounded-lg shadow-inner mb-2 flex flex-col space-y-2\"\r\n              style={{ backgroundColor: chatBackground }}\r\n            >\r\n              {(allChats[selectedUser.id] || []).map((c, i) => (\r\n                <div\r\n                  key={i}\r\n                  className={`max-w-[70%] p-2 rounded-lg shadow ${\r\n                    c.senderId === currentUser.id\r\n                      ? \"self-end bg-blue-500 text-white\"\r\n                      : \"self-start bg-white text-gray-800\"\r\n                  }`}\r\n                >\r\n                  {c.message}\r\n                </div>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </div>\r\n\r\n            {/* Input */}\r\n            <div className=\"flex items-center space-x-2\">\r\n              <input\r\n                className=\"flex-1 border rounded-full p-2 px-4 focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n                placeholder=\"Message...\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n                onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\r\n              />\r\n              <button\r\n                onClick={sendMessage}\r\n                disabled={!isConnected || !selectedUser}\r\n                className={`px-4 py-2 rounded-full text-white ${\r\n                  isConnected ? \"bg-blue-500 hover:bg-blue-600\" : \"bg-gray-400 cursor-not-allowed\"\r\n                }`}\r\n              >\r\n                Send\r\n              </button>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"flex-1 flex items-center justify-center text-gray-400 text-lg\">\r\n            Select a user to start chat\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}