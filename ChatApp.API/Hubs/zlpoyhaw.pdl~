using ChatApp.API.Data;
using Microsoft.AspNetCore.SignalR;

public class ChatHub : Hub
{
    private readonly AppDbContext _context;
    private static Dictionary<int, string> connectedUsers = new(); // userId -> connectionId

    public ChatHub(AppDbContext context)
    {
        _context = context;
    }

    public async Task Login(int userId)
    {
        connectedUsers[userId] = Context.ConnectionId;
        await Clients.All.SendAsync("UserLoggedIn", userId);
    }

    // User logs in
    public async Task Login(int userId)
    {
        connectedUsers[Context.ConnectionId] = userId;
        await Clients.All.SendAsync("UserLoggedIn", userId);
    }

    // Get list of all users
    public async Task GetAllUsers()
    {
        var users = _context.Users
            .Select(u => new { u.Id, u.Username })
            .ToList();

        await Clients.Caller.SendAsync("ReceiveUserList", users);
    }
    public async Task SendMessage(int receiverId, string message)
    {
        var senderId = connectedUsers.FirstOrDefault(x => x.Value == Context.ConnectionId).Key;

        var msg = new Message
        {
            SenderId = senderId,
            ReceiverId = receiverId,
            Text = message
        };

        _context.Messages.Add(msg);
        await _context.SaveChangesAsync();

        // send to receiver if online
        if (connectedUsers.ContainsKey(receiverId))
        {
            await Clients.Client(connectedUsers[receiverId]).SendAsync("ReceiveMessage", senderId, message);
        }

        // echo to sender
        await Clients.Caller.SendAsync("ReceiveMessage", senderId, message);
    }

    public override async Task OnDisconnectedAsync(Exception? exception)
    {
        var user = connectedUsers.FirstOrDefault(x => x.Value == Context.ConnectionId);
        if (user.Key != 0)
            connectedUsers.Remove(user.Key);

        await base.OnDisconnectedAsync(exception);
    }
}
